// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String   @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  role              UserRole @default(CUSTOMER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  addresses Address[]
  wallet   Wallet?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  price       Float
  comparePrice Float?
  sku         String?       @unique
  inventory   Int           @default(0)
  status      ProductStatus @default(DRAFT)
  featured    Boolean       @default(false)
  categoryId  String
  vendorId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  vendor   Vendor?  @relation(fields: [vendorId], references: [id])
  
  images      ProductImage[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  price     Float
  inventory Int     @default(0)
  sku       String? @unique

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Vendor {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  phone       String?
  address     String?
  status      VendorStatus @default(PENDING)
  commission  Float        @default(10.00)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  products Product[]
  orders   Order[]

  @@map("vendors")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  vendorId        String?
  status          OrderStatus @default(PENDING)
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  discount        Float       @default(0)
  total           Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress Json
  billingAddress  Json?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  vendor     Vendor?     @relation(fields: [vendorId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Float
  status          PaymentStatus @default(PENDING)
  method          String
  transactionId   String?
  paymentGateway  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String      @default("IN")
  phone       String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Coupon {
  id               String      @id @default(cuid())
  code             String      @unique
  description      String?
  type             CouponType  @default(PERCENTAGE)
  value            Float
  minimumAmount    Float?
  maximumDiscount  Float?
  usageLimit       Int?
  usageCount       Int         @default(0)
  isActive         Boolean     @default(true)
  validFrom        DateTime
  validTo          DateTime
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("coupons")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id          String              @id @default(cuid())
  walletId    String
  type        WalletTransactionType
  amount      Float
  description String?
  reference   String?
  createdAt   DateTime            @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  VENDOR
  MANAGER
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum WalletTransactionType {
  CREDIT
  DEBIT
  REFUND
  CASHBACK
  REFERRAL_BONUS
}